package com.sec.framework.security.aop;

import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.util.List;

import org.apache.commons.lang3.ArrayUtils;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.subject.Subject;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.sec.framework.aop.AbsInterceptor;
import com.sec.framework.security.PermissionQuerier;
import com.sec.framework.security.annotation.Permission;

@Aspect
@Component
public class AccessControlInterceptor extends AbsInterceptor {

	private static final Logger logger = LoggerFactory.getLogger(AccessControlInterceptor.class);

	@Autowired
	private PermissionQuerier querier;

	@Around("@annotation(com.sec.framework.security.annotation.Permission)")
	public Object accessControl(ProceedingJoinPoint joinPoint) {
		String methodName = joinPoint.getSignature().getName();
		try {
			Method method = getTargetMethod(joinPoint.getTarget().getClass().getMethods(), methodName);
			Annotation permission = method.getAnnotation(Permission.class);
			Object result = null;
			if (isGranted(permission)) {
				result = joinPoint.proceed(joinPoint.getArgs());
			}
			return result;
		} catch (Throwable e) {
			logger.error(e.getMessage(), e);
			throw new RuntimeException(e.getMessage(), e);
		}

	}

	/**
	 * 判断是否有权限访问该资源
	 * 
	 * @param permission
	 * @return
	 */
	private boolean isGranted(Annotation permission) {
		String permissionKey = ((Permission) permission).value();
		List<String> list = querier.queryPermission(permissionKey);
		Subject subject = SecurityUtils.getSubject();
		boolean[] resultArray = subject.isPermitted(list.toArray(new String[] {}));
		return ArrayUtils.contains(resultArray, true);
	}

	@Override
	public int getOrder() {
		return HIGHEST_PRECEDENCE;
	}

}
